return {
  "L3MON4D3/LuaSnip",
  config = function()
    local ls = require("luasnip") -- Load LuaSnip
    local s = ls.snippet
    local t = ls.text_node
    local i = ls.insert_node

    -- Add C++ snippets
    ls.add_snippets("cpp", {

      --NOTE: CP template
      s("template", {
        t({
          "#ifndef ONLINE_JUDGE",
          '#include "/usr/local/include/bits/stdc++.h"',
          "#else",
          "#include <bits/stdc++.h>",
          "#endif",
          "",
          "using namespace std;",
          "",
          "#define fastio() \\",
          "  ios_base::sync_with_stdio(false); \\",
          "  cin.tie(NULL); \\",
          "  cout.tie(NULL)",
          "#define MOD 1000000007",
          "#define MOD1 998244353",
          "#define INF 1e18",
          '#define nl "\\n"',
          "#define pb push_back",
          "#define ppb pop_back",
          "#define mp make_pair",
          "#define ff first",
          "#define ss second",
          "#define PI 3.141592653589793238462",
          "#define set_bits __builtin_popcountll",
          "#define sz(x) ((int)(x).size())",
          "#define all(x) (x).begin(), (x).end()",
          '#define yes cout << "YES\\n"',
          '#define no cout << "NO\\n"',
          "",
          "typedef long long ll;",
          "typedef unsigned long long ull;",
          "typedef long double lld;",
          "",
          "#ifndef ONLINE_JUDGE",
          "#define debug(x) \\",
          '  cerr << #x << " "; \\',
          "  _print(x); \\",
          "  cerr << endl;",
          "#else",
          "#define debug(x)",
          "#endif",
          "",
          "void _print(ll t) { cerr << t; }",
          "void _print(int t) { cerr << t; }",
          "void _print(string t) { cerr << t; }",
          "void _print(char t) { cerr << t; }",
          "void _print(lld t) { cerr << t; }",
          "void _print(double t) { cerr << t; }",
          "void _print(ull t) { cerr << t; }",
          "",
          "template <class T, class V> void _print(pair<T, V> p);",
          "template <class T> void _print(vector<T> v);",
          "template <class T> void _print(set<T> v);",
          "template <class T, class V> void _print(map<T, V> v);",
          "template <class T> void _print(multiset<T> v);",
          "template <class T, class V> void _print(pair<T, V> p) {",
          '  cerr << "{";',
          "  _print(p.ff);",
          '  cerr << ",";',
          "  _print(p.ss);",
          '  cerr << "}";',
          "}",
          "template <class T> void _print(vector<T> v) {",
          '  cerr << "[ ";',
          "  for (T i : v) {",
          "    _print(i);",
          '    cerr << " ";',
          "  }",
          '  cerr << "]";',
          "}",
          "template <class T> void _print(set<T> v) {",
          '  cerr << "[ ";',
          "  for (T i : v) {",
          "    _print(i);",
          '    cerr << " ";',
          "  }",
          '  cerr << "]";',
          "}",
          "template <class T> void _print(multiset<T> v) {",
          '  cerr << "[ ";',
          "  for (T i : v) {",
          "    _print(i);",
          '    cerr << " ";',
          "  }",
          '  cerr << "]";',
          "}",
          "template <class T, class V> void _print(map<T, V> v) {",
          '  cerr << "[ ";',
          "  for (auto i : v) {",
          "    _print(i);",
          '    cerr << " ";',
          "  }",
          '  cerr << "]";',
          "}",
          "",
          "/*",
          "   _____          _        ____       _",
          "  / ____|        | |      |  _ \\     | |",
          " | |     ___   __| | ___  | |_) | ___| | _____      __",
          " | |    / _ \\ / _` |/ _ \\ |  _ < / _ \\ |/ _ \\ \\ /\\ / /",
          " | |___| (_) | (_| |  __/ | |_) |  __/ | (_) \\ V  V /",
          "  \\_____\\___/ \\__,_|\\___| |____/ \\___|_|\\___/ \\_/\\_/",
          "",
          "*/",
          "",
          "void solve()",
          "{",
          "\t",
        }),
        i(1), -- Cursor starts here
        t({
          "",
          "}",
          "",
          "int main() {",
          "#ifndef ONLINE_JUDGE",
          '  freopen("Error.txt", "w", stderr);',
          '  freopen("input.txt", "r", stdin);',
          "#endif",
          "  fastio();",
          "  ll t;",
          "  cin >> t;",
          "  while (t--) {",
          "    solve();",
          "  }",
          "}",
        }),
      }),
      --NOTE: Merge sort
      s("mergeSort", {
        t({
          "// TOPIC: Merge Sort",
          "void merge(vector<int> &arr, int low, int mid, int high) {",
          "  vector<int> temp;",
          "  int left = low, right = mid + 1;",
          "",
          "  while (left <= mid && right <= high) {",
          "    if (arr[left] <= arr[right]) {",
          "      temp.push_back(arr[left]);",
          "      left++;",
          "    } else {",
          "      temp.push_back(arr[right]);",
          "      right++;",
          "    }",
          "  }",
          "",
          "  while (left <= mid) {",
          "    temp.push_back(arr[left]);",
          "    left++;",
          "  }",
          "",
          "  while (right <= high) {",
          "    temp.push_back(arr[right]);",
          "    right++;",
          "  }",
          "",
          "  for (int i = low; i <= high; i++) {",
          "    arr[i] = temp[i - low];",
          "  }",
          "}",
          "",
          "void mergeSortHelper(vector<int> &arr, int low, int high) {",
          "  if (low >= high)",
          "    return;",
          "  int mid = (low + high) / 2;",
          "  mergeSortHelper(arr, low, mid);",
          "  mergeSortHelper(arr, mid + 1, high);",
          "  merge(arr, low, mid, high);",
          "}",
          "",
          "vector<int> mergeSort(vector<int> &nums) {",
          "  int n = nums.size();",
          "  mergeSortHelper(nums, 0, n - 1);",
          "  return nums;",
          "}",
        }),
      }),

      --NOTE: Disjoint set
      s("disjointset", {
        t({
          "//TOPIC: Disjoint set data structure",
          "class DisjointSet {",
          "  vector<int> rank, size, parent;",
          "",
          "public:",
          "  DisjointSet(int n) {",
          "",
          "    rank.resize(n + 1, 0);",
          "    size.resize(n + 1, 1);",
          "    parent.resize(n + 1);",
          "    for (int i = 0; i <= n; i++) {",
          "      parent[i] = i;",
          "    }",
          "  }",
          "",
          "  // First time log n and after that constant time",
          "  int findUParent(int u) {",
          "    if (u == parent[u]) {",
          "      return u;",
          "    }",
          "    return parent[u] = findUParent(parent[u]);",
          "  }",
          "",
          "  void unionByRank(int u, int v) {",
          "    int ulp_u = findUParent(u);",
          "    int ulp_v = findUParent(v);",
          "",
          "    if (ulp_u == ulp_v) {",
          "      return;",
          "    }",
          "",
          "    if (rank[ulp_u] < rank[ulp_v]) {",
          "      parent[ulp_u] = ulp_v;",
          "    } else if (rank[ulp_v] < rank[ulp_u]) {",
          "      parent[ulp_v] = ulp_u;",
          "    } else {",
          "      parent[ulp_v] = ulp_u;",
          "      rank[ulp_u]++;",
          "    }",
          "  }",
          "",
          "  void unionBySize(int u, int v) {",
          "    int ulp_u = findUParent(u);",
          "    int ulp_v = findUParent(v);",
          "",
          "    if (ulp_u == ulp_v) {",
          "      return;",
          "    }",
          "",
          "    if (size[ulp_u] < size[ulp_v]) {",
          "      parent[ulp_u] = ulp_v;",
          "      size[ulp_v] += size[ulp_u];",
          "    } else {",
          "      parent[ulp_v] = ulp_u;",
          "      size[ulp_u] += size[ulp_v];",
          "    }",
          "  }",
          "};",
        }),
      }),

      --NOTE: Binary exponentiation iterative
      s("binpow", {
        t({
          "// TOPIC: Binary exponentiation",
          "ll binPow(ll a, ll b) {",
          "  ll ans = 1;",
          "  while (b) {",
          "    if (b & 1) {",
          "      ans = (ans * a) % MOD;",
          "    }",
          "    a = (a * a) % MOD;",
          "    b >>= 1;",
          "  }",
          "  return ans;",
          "}",
        }),
      }),

      --NOTE: Binary exponentiation recursive
      s("binpowrec", {
        t({
          "// TOPIC: Binary exponentiation",
          "ll binPowRec(ll a, ll b) {",
          "  if (b == 0) return 1;",
          "  ll res = binPowRec(a, b / 2);",
          "  res = (res * res) % MOD;",
          "  if (b & 1) {",
          "    res = (res * a) % MOD;",
          "  }",
          "  return res;",
          "}",
        }),
      }),

      --NOTE: Binary mulitplication
      s("binmul", {
        t({
          "// TOPIC: Binary multiplication",
          "ll binMul(ll a, ll b) {",
          "  ll ans = 0;",
          "  while (b) {",
          "    if (b & 1) {",
          "      ans = (ans * a) % MOD;",
          "    }",
          "",
          "    a = (a + a) % MOD;",
          "    b >>= 1;",
          "  }",
          "",
          "  return ans;",
          "}",
        }),
      }),

      --NOTE: Finding nCr
      s("ncr", {
        t({
          "// TOPIC: Finding nCr",
          "ll nCr(ll n, ll r) {",
          "  if (r > n) {",
          "    return 0;",
          "  }",
          "",
          "  if (r == 0 || r == n) {",
          "    return 1;",
          "  }",
          "",
          "  return nCr(n - 1, r - 1) + nCr(n - 1, r);",
          "}",
        }),
      }),

      -- NOTE: Sieve of Eratosthenes
      s("sieve", {
        t({
          "// TOPIC: Sieve of Eratosthenes",
          "void sieve(ll n) {",
          "  vector<bool> isPrime(n + 1, true);",
          "  for (ll i = 2; i * i <= n; i++) {",
          "    if (!isPrime[i]) {",
          "      continue;",
          "    }",
          "",
          "    for (ll j = i * i; j <= n; j += i) {",
          "      isPrime[j] = false;",
          "    }",
          "  }",
          "}",
        }),
      }),
    })
  end,
}
